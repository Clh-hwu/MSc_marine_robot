clc;
clear;
close all;
% Load the Queensland road network data
load("queenslandRoutes", "places", "routes");

% Specify states, links, and weights for a navGraph object
states = places.utm;               % UTM coordinates of cities
names = places.name;               % Names of cities
links = [routes.start routes.end]; % Adjacent cities (links)
weights = routes.time;             % Travel time between adjacent cities

% Create a navGraph object
graphObj = navGraph(states, links, Weight=weights, Name=names);

% Create a graph-based A* path planner
planner = plannerAStar(graphObj);

% Optionally, customize the heuristic cost function
% Example: Manhattan distance divided by 100
planner.HeuristicCostFcn = @(state1,state2) ...
    sum(abs(state1-state2), 2) / 100;

% Define the start and goal cities
startCity = "Hughenden";
goalCity = "Brisbane";

% Find the shortest path using the graph-based A* algorithm
[pathOutput, solutionInfo] = plan(planner, startCity, goalCity);

% Visualize the results
h = show(graphObj);
set(h, XData=graphObj.States.StateVector(:, 1), ...
      YData=graphObj.States.StateVector(:, 2));
  
% Highlight the path on the graph
pathStateIDs = solutionInfo.PathStateIDs;
highlight(h, pathStateIDs, EdgeColor="#EDB120", LineWidth=4);
highlight(h, pathStateIDs(1), NodeColor="#77AC30", MarkerSize=5); % Start node
highlight(h, pathStateIDs(end), NodeColor="#D95319", MarkerSize=5); % Goal node

% Optionally, display the path details
disp('Shortest path:');
disp(names(pathStateIDs));
disp(['Total cost (time): ', num2str(solutionInfo.PathCost)]);

